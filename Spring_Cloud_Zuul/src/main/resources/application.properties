spring.application.name=api-gateway
server.port=5001

#禁止所有eureka服务通过服务名直接访问
zuul.ignored-services="*"

zuul.routes.api.path = /api/**
zuul.routes.api.service-id = eureka-client

zuul.routes.feign_api.path = /feign_api/**
zuul.routes.feign_api.service-id = eureka-consumer-feign


zuul.routes.hystrix_api.path = /feign_hystrix_api/**
zuul.routes.hystrix_api.service-id = eureka-consumer-hystrix-feign

zuul.host.connect-timeout-millis=60000
zuul.host.socket-timeout-millis=60000
zuul.host.max-total-connections=500
        

#注意，配置时，ribbon开头的在文件中里是不给提示的，不要以为不提示就是没效果，其实是可以用的。
#这个ReadTimeout和ConnectTimeout区别是很大的，ConnectTimeout是指建立连接的时间，如果目标服务宕机或网络故障，那么响应的就是ConnectTimeout，无法连接。而ReadTimeout则是连接建立后，等待目标服务返回响应的时间，譬如目标服务做了一个复杂操作导致耗时较长，那么会触发ReadTimeout。
#譬如zuul路由了/user路径到user服务上，如果User1实例宕机了，那么配置了retry的zuul就会在重试MaxAutoRetries次数后，切换到另一个实例User2上。如果User2也故障了，那么返回404.
#retryableStatusCodes里面有几个错误码，意思就是遇到哪些错误码时触发重试。默认是404，我多配了几个，仅供参考。

#是否开启路由重试
zuul.retryable=true
#请求连接的超时时间
ribbon.ConnectTimeout=2000
#请求处理的超时时间
ribbon.ReadTimeout=5000
#Eribbon刷新时间 （客户端）
ribbon.ServerListRefreshInterval=5000
#同一台实例的重试次数(每台服务器最多重试次数，但是首次调用不包括在内)
ribbon.maxAutoRetries=1
#切换实例的重试次数(最多重试多少台服务器)
ribbon.MaxAutoRetriesNextServer=2
# 是否所有操作都进行重试
ribbon.OkToRetryOnAllOperations=false
#断路器线程池超时时间，这个值一定要比ribbon超时时间长
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=80000
ribbon.retryableStatusCodes=404,502,500,408




#表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance
#默认为90秒
#如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
#如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
#该值至少应该大于leaseRenewalIntervalInSeconds
eureka.instance.lease-expiration-duration-in-seconds=30
#表示eureka client发送心跳给server端的频率。如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance
eureka.instance.lease-renewal-interval-in-seconds=10
#快速发现服务，默认为30秒( 拉服务列表时间间隔 （客户端）)
eureka.client.registry-fetch-interval-seconds=3

eureka.client.serviceUrl.defaultZone=http://peer1:1111/eureka/